import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"C语言内存管理","description":"在c语言中内存分配包括静态和动态两种类型，本文是各种内存申请方式的详细介绍（DS）","frontmatter":{"date":"2025-03-28T00:00:00.000Z","title":"C语言内存管理","category":"c语言","tags":["c"],"description":"在c语言中内存分配包括静态和动态两种类型，本文是各种内存申请方式的详细介绍（DS）"},"headers":[],"relativePath":"posts/learn-c/C语言内存管理.md","filePath":"posts/learn-c/C语言内存管理.md"}'),n={name:"posts/learn-c/C语言内存管理.md"};function h(k,s,p,e,r,d){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="内存的分配" tabindex="-1">内存的分配 <a class="header-anchor" href="#内存的分配" aria-label="Permalink to &quot;内存的分配&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">内存分配的类型</p><p>分为三种：静态内存、栈内存、堆内存</p></div><h4 id="_1-静态内存分配" tabindex="-1"><strong>1. 静态内存分配</strong> <a class="header-anchor" href="#_1-静态内存分配" aria-label="Permalink to &quot;**1. 静态内存分配**&quot;">​</a></h4><ul><li><strong>定义</strong>：在编译时确定大小和位置，生命周期与程序一致。 <ul><li><strong>特点</strong>： <ul><li>存放全局变量、静态变量、常量。</li><li>无需手动管理，由系统自动分配和释放。</li></ul></li></ul></li><li><strong>内存区域</strong>： <ul><li><strong>数据段（Data Segment）</strong>：存放已初始化的全局变量和静态变量。</li><li><strong>BSS段（Block Started by Symbol）</strong>：存放未初始化的全局变量和静态变量（默认初始化为0）。</li><li><strong>代码段（Text Segment）</strong>：存放程序代码和常量（如字符串常量）。</li></ul></li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 数据段（.data）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 数据段（.data）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 代码段（.rodata，只读）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local_static;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // BSS段（.bss）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-栈内存分配" tabindex="-1"><strong>2. 栈内存分配</strong> <a class="header-anchor" href="#_2-栈内存分配" aria-label="Permalink to &quot;**2. 栈内存分配**&quot;">​</a></h4><ul><li><strong>定义</strong>：由编译器自动管理，存放函数内的局部变量和参数。</li><li><strong>特点</strong>： <ul><li>内存分配和释放自动完成（函数调用时分配，返回时释放）。</li><li>大小固定且有限（默认1-8MB，超出导致栈溢出）。</li></ul></li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 栈内存分配</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 栈内存分配（注意避免过大）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-堆内存分配" tabindex="-1"><strong>3. 堆内存分配</strong> <a class="header-anchor" href="#_3-堆内存分配" aria-label="Permalink to &quot;**3. 堆内存分配**&quot;">​</a></h4><ul><li><strong>定义</strong>：由程序员手动管理的内存区域，用于动态分配。</li><li><strong>特点</strong>： <ul><li>内存大小可在运行时动态调整。</li><li>需显式分配（<code>malloc</code>/<code>calloc</code>）和释放（<code>free</code>）。</li><li>内存泄漏风险高，需谨慎管理。</li></ul></li><li><strong>示例</strong>：</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 堆内存分配</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 必须手动释放</span></span></code></pre></div>`,11)]))}const c=i(n,[["render",h]]);export{o as __pageData,c as default};
