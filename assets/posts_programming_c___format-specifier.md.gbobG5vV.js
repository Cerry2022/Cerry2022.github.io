import{_ as i,c as t,o as a,ag as n}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"格式说明符","description":"","frontmatter":{},"headers":[],"relativePath":"posts/programming/c++/format-specifier.md","filePath":"posts/programming/c++/format-specifier.md"}'),h={name:"posts/programming/c++/format-specifier.md"};function d(p,s,e,l,k,r){return a(),t("div",null,s[0]||(s[0]=[n(`<h1 id="格式说明符" tabindex="-1">格式说明符 <a class="header-anchor" href="#格式说明符" aria-label="Permalink to &quot;格式说明符&quot;">​</a></h1><p>格式说明符，<a href="https://cplusplus.com/reference/cstdio/printf/#parameters" target="_blank" rel="noreferrer">format specifier</a></p><p>格式说明符更多是用在 printf 格式化输出。</p><h2 id="prototype" tabindex="-1">prototype <a class="header-anchor" href="#prototype" aria-label="Permalink to &quot;prototype&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[flags][width][.precision][length]specifier</span></span></code></pre></div><h2 id="specifier" tabindex="-1">specifier <a class="header-anchor" href="#specifier" aria-label="Permalink to &quot;specifier&quot;">​</a></h2><table><thead><tr><th width="123.33333333333331">specifier</th><th width="474">输出</th><th>例</th></tr></thead><tbody><tr><td>d / i</td><td>Signed decimal integer<br>有符号十进制整数<br><code>int</code></td><td>392</td></tr><tr><td>u</td><td>Unsigned decimal integer<br>无符号十进制整数<br><code>unsigned int</code></td><td>7235</td></tr><tr><td>o</td><td>Unsigned octal<br>无符号八进制整数<br><code>unsigned int</code></td><td>610</td></tr><tr><td>x / X</td><td>Unsigned hexadecimal integer<br>无符号十六进制整数，小写 / 大写<br><code>unsigned int</code></td><td>7fa / 7FA</td></tr><tr><td>f / F</td><td>Decimal floating point, lowercase<br>十进制浮点数，小写 / 大写 (?)<br><code>double</code></td><td>392.65</td></tr><tr><td>e / E</td><td>Scientific notation (mantissa/exponent)<br>科学计数法 (尾数/指数)，小写 / 大写</td><td>3.9265e+2<br>3.9265E+2</td></tr><tr><td>g / G</td><td>Use the shortest representation: %e / %E or %f / %F<br>最短形式表示 %e / %E、%f / %F</td><td>392.65</td></tr><tr><td>a / A</td><td>Hexadecimal floating point<br>十六进制浮点数，小写/大写<br></td><td>-0xc.90fep-2<br>-0xc.90FEP-2</td></tr><tr><td>c</td><td><p>Character<br>字符</p><p><code>char</code></p></td><td>a</td></tr><tr><td>s</td><td>String of characters<br>字符串</td><td>sample</td></tr><tr><td>p</td><td>Pointer address<br>指针地址</td><td>b8000000</td></tr><tr><td>n</td><td>不输出任何内容。相应的参数须是指向 \`signed int\` 的指针</td><td></td></tr><tr><td>%</td><td><code>%%</code> 输出百分号</td><td>%</td></tr></tbody></table><h2 id="flags" tabindex="-1">flags <a class="header-anchor" href="#flags" aria-label="Permalink to &quot;flags&quot;">​</a></h2><table><thead><tr><th width="160.1609130798562">flags</th><th>说明</th></tr></thead><tbody><tr><td>-</td><td>在给定的宽度内 左对齐。（默认是右对齐）</td></tr><tr><td>+</td><td>强制输出结果带 +号（正数） 或 -号（负数）。</td></tr><tr><td>空格<br>(一个或多个)</td><td>在值之前插入一个空格。</td></tr><tr><td>#</td><td>与 o、x、X 说明符一起使用时，对于不为零的值，前面分别加上 0、0x、0X；<br>与 a/A、e/E、f/F、g/G 一起使用时，即使后面没有数字，也会强制输出包含一个小数点。</td></tr><tr><td>0</td><td>在给定的宽度内 用0向左填充。</td></tr></tbody></table><p>例：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%-6d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // -</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%+d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%      d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 空格</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%#x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // #</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%06d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 0</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[233   ]</span></span>
<span class="line"><span>[-233]</span></span>
<span class="line"><span>[ 233]</span></span>
<span class="line"><span>[0x64]</span></span>
<span class="line"><span>[000100]</span></span></code></pre></div><h2 id="width" tabindex="-1">width <a class="header-anchor" href="#width" aria-label="Permalink to &quot;width&quot;">​</a></h2><table><thead><tr><th width="106.14679187498098">width</th><th>说明</th></tr></thead><tbody><tr><td>数字</td><td>指定输出位数，不足在结果前用<span style="color:red;">空格</span>填充，右对齐。<br>位数长于 width 也不会被截断。</td></tr><tr><td>*</td><td>width 不在格式说明符中指定，而是在被输出的值参数之前附加。</td></tr></tbody></table><p>例：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%6d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 数字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%*d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // *</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[   233]</span></span>
<span class="line"><span>[   233]</span></span></code></pre></div><h2 id="precision" tabindex="-1">.precision <a class="header-anchor" href="#precision" aria-label="Permalink to &quot;.precision&quot;">​</a></h2><table><thead><tr><th width="135.02050113895217">.precision</th><th>说明</th></tr></thead><tbody><tr><td>.number</td><td>对于整数说明符 (d, i, o, u, x, X)：指定输出位数，不足用前导零填充，过长也不会被截断。number 为 0 时意味着不为值0 写入/输出 任何字符。<br>对于 a/A、e/E、f/F 说明符：小数点后要输出的位数（默认为6）。<br>对于 g/G 说明符：要输出的有效数字的最大数量。<br>对于 s 说明符：要输出的最大字符数。（默认情况遇空字符结束输出）<br>如果 number 为空，默认为0。</td></tr><tr><td>.*</td><td>precision 不在格式说明符中指定，而是在被输出的值参数之前附加。</td></tr></tbody></table><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.6d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.6f\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.6g\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23.3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">e+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.6s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prprprpr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%6.d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>000233</span></span>
<span class="line"><span>0.233000</span></span>
<span class="line"><span>23300</span></span>
<span class="line"><span>prprpr</span></span>
<span class="line"><span>[      ]</span></span></code></pre></div><h2 id="length" tabindex="-1">length <a class="header-anchor" href="#length" aria-label="Permalink to &quot;length&quot;">​</a></h2><table><thead><tr><th width="113">-</th><th width="107">specifiers</th><th width="175">-</th><th width="160">-</th><th width="143">-</th><th>-</th><th>-</th><th width="140">-</th></tr></thead><tbody><tr><td>length</td><td>d i</td><td>u o x/X</td><td>f/F e/E g/G a/A</td><td>c</td><td>s</td><td>p</td><td>n</td></tr><tr><td>(无)</td><td>int</td><td>unsigned int</td><td>double</td><td>int</td><td>char*</td><td>void*</td><td>int*</td></tr><tr><td>h</td><td>short int</td><td>unsigned short int</td><td></td><td></td><td></td><td></td><td>short int*</td></tr><tr><td>l</td><td>long int</td><td>unsigned long int</td><td></td><td>wint_t</td><td>wchar_t*</td><td></td><td>long int*</td></tr><tr><td>L</td><td></td><td></td><td></td><td>long double</td><td></td><td></td><td></td></tr></tbody></table>`,25)]))}const E=i(h,[["render",d]]);export{g as __pageData,E as default};
