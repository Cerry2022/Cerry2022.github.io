/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LoaderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/loader-settings-tab.ts
var import_obsidian = require("obsidian");
var LoaderSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Load .txt files").addToggle((toggle) => toggle.setValue(this.plugin.settings.doLoadTxt).onChange(async (value) => {
      this.plugin.settings.doLoadTxt = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Create .txt files").addToggle((toggle) => toggle.setValue(this.plugin.settings.doCreateTxt).onChange(async (value) => {
      this.plugin.settings.doCreateTxt = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Load .json files").addToggle((toggle) => toggle.setValue(this.plugin.settings.doLoadJson).onChange(async (value) => {
      this.plugin.settings.doLoadJson = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Create .json files").addToggle((toggle) => toggle.setValue(this.plugin.settings.doCreateJson).onChange(async (value) => {
      this.plugin.settings.doCreateJson = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Load .xml files").addToggle((toggle) => toggle.setValue(this.plugin.settings.doLoadXml).onChange(async (value) => {
      this.plugin.settings.doLoadXml = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Create .xml files").addToggle((toggle) => toggle.setValue(this.plugin.settings.doCreateXml).onChange(async (value) => {
      this.plugin.settings.doCreateXml = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/constants.ts
var VIEW_TYPE_JSON = "json";
var VIEW_TYPE_TXT = "txt";
var EXT_JSON = "json";
var EXT_XML = "xml";
var EXT_TXT = "txt";

// src/utils.ts
var import_obsidian2 = require("obsidian");
var path = {
  /**
   * Joins multiple strings into a path using Obsidian's preferred format.
   * The resulting path is normalized with Obsidian's `normalizePath` func.
   * - Converts path separators to '/' on all platforms
   * - Removes duplicate separators
   * - Removes trailing slash
   */
  join(...strings) {
    const parts = strings.map((s) => String(s).trim()).filter((s) => s != null);
    return (0, import_obsidian2.normalizePath)(parts.join("/"));
  }
};

// src/views/json-view.ts
var import_obsidian3 = require("obsidian");

// node_modules/codemirror/dist/index.js
var import_view = require("@codemirror/view");
var import_view2 = require("@codemirror/view");
var import_state = require("@codemirror/state");
var import_language = require("@codemirror/language");
var import_commands = require("@codemirror/commands");
var import_search = require("@codemirror/search");
var import_autocomplete = require("@codemirror/autocomplete");
var import_lint = require("@codemirror/lint");
var basicSetup = /* @__PURE__ */ (() => [
  (0, import_view.lineNumbers)(),
  (0, import_view.highlightActiveLineGutter)(),
  (0, import_view.highlightSpecialChars)(),
  (0, import_commands.history)(),
  (0, import_language.foldGutter)(),
  (0, import_view.drawSelection)(),
  (0, import_view.dropCursor)(),
  import_state.EditorState.allowMultipleSelections.of(true),
  (0, import_language.indentOnInput)(),
  (0, import_language.syntaxHighlighting)(import_language.defaultHighlightStyle, { fallback: true }),
  (0, import_language.bracketMatching)(),
  (0, import_autocomplete.closeBrackets)(),
  (0, import_autocomplete.autocompletion)(),
  (0, import_view.rectangularSelection)(),
  (0, import_view.crosshairCursor)(),
  (0, import_view.highlightActiveLine)(),
  (0, import_search.highlightSelectionMatches)(),
  import_view.keymap.of([
    ...import_autocomplete.closeBracketsKeymap,
    ...import_commands.defaultKeymap,
    ...import_search.searchKeymap,
    ...import_commands.historyKeymap,
    ...import_language.foldKeymap,
    ...import_autocomplete.completionKeymap,
    ...import_lint.lintKeymap
  ])
])();

// src/views/json-view.ts
var import_view4 = require("@codemirror/view");

// node_modules/@lezer/json/dist/index.js
var import_lr = require("@lezer/lr");
var import_highlight = require("@lezer/highlight");
var jsonHighlighting = (0, import_highlight.styleTags)({
  String: import_highlight.tags.string,
  Number: import_highlight.tags.number,
  "True False": import_highlight.tags.bool,
  PropertyName: import_highlight.tags.propertyName,
  Null: import_highlight.tags.null,
  ",": import_highlight.tags.separator,
  "[ ]": import_highlight.tags.squareBracket,
  "{ }": import_highlight.tags.brace
});
var parser = import_lr.LRParser.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "\u26A0 JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["openedBy", 7, "{", 12, "["],
    ["closedBy", 8, "}", 13, "]"]
  ],
  propSources: [jsonHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
  tokenizers: [0],
  topRules: { "JsonText": [0, 1] },
  tokenPrec: 0
});

// node_modules/@codemirror/lang-json/dist/index.js
var import_language2 = require("@codemirror/language");
var jsonLanguage = /* @__PURE__ */ import_language2.LRLanguage.define({
  name: "json",
  parser: /* @__PURE__ */ parser.configure({
    props: [
      /* @__PURE__ */ import_language2.indentNodeProp.add({
        Object: /* @__PURE__ */ (0, import_language2.continuedIndent)({ except: /^\s*\}/ }),
        Array: /* @__PURE__ */ (0, import_language2.continuedIndent)({ except: /^\s*\]/ })
      }),
      /* @__PURE__ */ import_language2.foldNodeProp.add({
        "Object Array": import_language2.foldInside
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  }
});
function json() {
  return new import_language2.LanguageSupport(jsonLanguage);
}

// src/views/json-view.ts
var import_state2 = require("@codemirror/state");

// src/services/indentation-provider.ts
var import_view3 = require("@codemirror/view");
var import_commands2 = require("@codemirror/commands");
var import_language3 = require("@codemirror/language");
var getIndentByTabExtension = () => [
  import_view3.keymap.of([import_commands2.indentWithTab]),
  import_language3.indentUnit.of("    ")
];
var getInsertTabsExtension = () => [
  import_view3.keymap.of([
    // {
    // 	key: 'Tab',
    // 	preventDefault: true,
    // 	run: insertTab,
    // },
    {
      key: "Shift-Tab",
      preventDefault: true,
      run: import_commands2.indentLess
    }
  ])
];

// src/views/json-view.ts
var JsonView = class extends import_obsidian3.TextFileView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  onload() {
    super.onload();
    this.editorEl = this.contentEl.createDiv("datafile-source-view mod-cm6");
    let extensions;
    extensions = [
      basicSetup,
      getIndentByTabExtension(),
      json()
    ];
    this.cmEditor = new import_view4.EditorView({
      state: import_state2.EditorState.create({
        extensions
      }),
      parent: this.editorEl
    });
    this.app.workspace.trigger("codemirror", this.cmEditor);
  }
  // gets the title of the document
  getDisplayText() {
    if (this.file) {
      return this.file.basename;
    }
    return "NOFILE";
  }
  clear() {
  }
  getViewData() {
    return this.cmEditor.state.doc.toString();
  }
  getViewType() {
    return VIEW_TYPE_JSON;
  }
  onClose() {
    return super.onClose();
  }
  setViewData(data, clear) {
    this.cmEditor.dispatch({ changes: { from: 0, to: this.cmEditor.state.doc.length, insert: data } });
  }
};

// src/views/txt-view.ts
var import_obsidian4 = require("obsidian");
var import_view5 = require("@codemirror/view");
var import_state3 = require("@codemirror/state");
var TxtView = class extends import_obsidian4.TextFileView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  onload() {
    super.onload();
    this.editorEl = this.contentEl.createDiv("datafile-source-view mod-cm6");
    this.cmEditor = new import_view5.EditorView({
      state: import_state3.EditorState.create({
        extensions: [
          basicSetup,
          getInsertTabsExtension()
        ]
      }),
      parent: this.editorEl
    });
    this.app.workspace.trigger("codemirror", this.cmEditor);
  }
  // gets the title of the document
  getDisplayText() {
    if (this.file) {
      return this.file.basename;
    }
    return "NOFILE";
  }
  clear() {
  }
  getViewData() {
    return this.cmEditor.state.doc.toString();
  }
  getViewType() {
    return VIEW_TYPE_TXT;
  }
  onClose() {
    return super.onClose();
  }
  setViewData(data, clear) {
    this.cmEditor.dispatch({ changes: { from: 0, to: this.cmEditor.state.doc.length, insert: data } });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  doLoadTxt: true,
  doCreateTxt: true,
  doLoadXml: true,
  doCreateXml: true,
  doLoadJson: true,
  doCreateJson: true
};
var LoaderPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.TryRegisterTxt();
    this.tryRegisterJson();
    this.tryRegisterXml();
    this.addSettingTab(new LoaderSettingTab(this.app, this));
  }
  TryRegisterTxt() {
    if (this.settings.doLoadTxt) {
      this.registerView(VIEW_TYPE_TXT, (leaf) => new TxtView(leaf, this));
      this.registerExtensions([EXT_TXT], VIEW_TYPE_TXT);
    }
    if (this.settings.doCreateTxt)
      this.registerContextMenuCommand(EXT_TXT);
  }
  tryRegisterJson() {
    if (this.settings.doLoadTxt) {
      this.registerView(VIEW_TYPE_JSON, (leaf) => new JsonView(leaf, this));
      this.registerExtensions([EXT_JSON], VIEW_TYPE_JSON);
    }
    if (this.settings.doCreateJson)
      this.registerContextMenuCommand(EXT_JSON);
  }
  tryRegisterXml() {
    if (this.settings.doLoadXml)
      this.registerExtensions([EXT_XML], VIEW_TYPE_TXT);
    if (this.settings.doCreateXml) {
      this.registerContextMenuCommand(EXT_XML);
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  registerContextMenuCommand(fileExt) {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        const parent = file instanceof import_obsidian5.TFile ? file.parent : file;
        menu.addItem((item) => {
          item.setTitle(`Create .${fileExt} file`).setIcon("document").onClick(async () => {
            console.log(parent == null ? void 0 : parent.path);
            if (parent)
              await this.createFile(parent.path, fileExt);
          });
        });
      })
    );
  }
  async createFile(dirPath, extension) {
    const { vault } = this.app;
    const { adapter } = vault;
    const name = "Unknown";
    const filePath = path.join(dirPath, `${name}.${extension}`);
    try {
      const fileExists = await adapter.exists(filePath);
      if (fileExists)
        throw new Error(`${filePath} already exists`);
      const File = await vault.create(filePath, "");
      const leaf = this.app.workspace.getLeaf(true);
      await leaf.openFile(File);
    } catch (error) {
      console.log(error.toString());
    }
  }
};

/* nosourcemap */